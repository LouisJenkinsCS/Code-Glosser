{
    "LANG_NAME": "Haskell",
    "COMMENT_SINGLE": {
        "1": "--"
    },
    "COMMENT_MULTI": {
        "{-": "-}"
    },
    "COMMENT_REGEXP": {
        "2": "\/-->\/",
        "3": "\/{-(?:(?R)|.)-}\/s"
    },
    "CASE_KEYWORDS": 0,
    "QUOTEMARKS": [
        "\""
    ],
    "ESCAPE_CHAR": "\\",
    "KEYWORDS": {
        "1": [
            "as",
            "case",
            "of",
            "class",
            "data",
            "default",
            "deriving",
            "do",
            "forall",
            "hiding",
            "if",
            "then",
            "else",
            "import",
            "infix",
            "infixl",
            "infixr",
            "instance",
            "let",
            "in",
            "module",
            "newtype",
            "qualified",
            "type",
            "where"
        ],
        "2": [
            "Foreign",
            "Numeric",
            "Prelude"
        ],
        "3": [
            "not",
            "otherwise",
            "maybe",
            "either",
            "fst",
            "snd",
            "curry",
            "uncurry",
            "compare",
            "max",
            "min",
            "succ",
            "pred",
            "toEnum",
            "fromEnum",
            "enumFrom",
            "enumFromThen",
            "enumFromTo",
            "enumFromThenTo",
            "minBound",
            "maxBound",
            "negate",
            "abs",
            "signum",
            "fromInteger",
            "toRational",
            "quot",
            "rem",
            "div",
            "mod",
            "quotRem",
            "divMod",
            "toInteger",
            "recip",
            "fromRational",
            "pi",
            "exp",
            "log",
            "sqrt",
            "logBase",
            "sin",
            "cos",
            "tan",
            "asin",
            "acos",
            "atan",
            "sinh",
            "cosh",
            "tanh",
            "asinh",
            "acosh",
            "atanh",
            "properFraction",
            "truncate",
            "round",
            "ceiling",
            "floor",
            "floatRadix",
            "floatDigits",
            "floatRange",
            "decodeFloat",
            "encodeFloat",
            "exponent",
            "significand",
            "scaleFloat",
            "isNaN",
            "isInfinite",
            "isDenomalized",
            "isNegativeZero",
            "isIEEE",
            "atan2",
            "subtract",
            "even",
            "odd",
            "gcd",
            "lcm",
            "fromIntegral",
            "realToFrac",
            "return",
            "fail",
            "fmap",
            "mapM",
            "mapM_",
            "sequence",
            "sequence_",
            "id",
            "const",
            "flip",
            "until",
            "asTypeOf",
            "error",
            "undefined",
            "seq",
            "map",
            "filter",
            "head",
            "last",
            "tail",
            "init",
            "null",
            "length",
            "reverse",
            "foldl",
            "foldl1",
            "foldr",
            "foldr1",
            "and",
            "or",
            "any",
            "all",
            "sum",
            "product",
            "concat",
            "concatMap",
            "maximum",
            "minimum",
            "scanl",
            "scanl1",
            "scanr",
            "scanr1",
            "iterate",
            "repeat",
            "cycle",
            "take",
            "drop",
            "splitAt",
            "takeWhile",
            "dropWhile",
            "span",
            "break",
            "elem",
            "notElem",
            "lookup",
            "zip",
            "zip3",
            "zipWith",
            "zipWith3",
            "unzip",
            "unzip3",
            "lines",
            "words",
            "unlines",
            "unwords",
            "showPrec",
            "show",
            "showList",
            "shows",
            "showChar",
            "showString",
            "showParen",
            "readsPrec",
            "readList",
            "reads",
            "readParen",
            "read",
            "lex",
            "putChar",
            "putStr",
            "putStrLn",
            "print",
            "getChar",
            "getLine",
            "getContents",
            "interact",
            "readFile",
            "writeFile",
            "appendFile",
            "readIO",
            "readLn",
            "ioError",
            "userError",
            "catch"
        ],
        "4": [
            "Bool",
            "Maybe",
            "Either",
            "Ordering",
            "Char",
            "String",
            "Int",
            "Integer",
            "Float",
            "Double",
            "Rational",
            "ShowS",
            "ReadS",
            "IO",
            "IOError",
            "IOException"
        ],
        "5": [
            "Ord",
            "Eq",
            "Enum",
            "Bounded",
            "Num",
            "Real",
            "Integral",
            "Fractional",
            "Floating",
            "RealFrac",
            "RealFloat",
            "Monad",
            "Functor",
            "Show",
            "Read"
        ]
    },
    "SYMBOLS": [
        "!",
        "@",
        "#",
        "$",
        "%",
        "&",
        "*",
        "-",
        "+",
        "=",
        "^",
        "~",
        "|",
        "\\",
        ">",
        "<",
        ":",
        "?",
        "\/"
    ],
    "CASE_SENSITIVE": [
        false,
        true,
        true,
        true,
        true,
        true
    ],
    "STYLES": {
        "KEYWORDS": {
            "1": "color: #06c; font-weight: bold;",
            "2": "color: #06c; font-weight: bold;",
            "3": "font-weight: bold;",
            "4": "color: #cccc00; font-weight: bold;",
            "5": "color: maroon; font-weight: bold;"
        },
        "COMMENTS": {
            "1": "color: #5d478b; font-style: italic;",
            "2": "color: #339933; font-weight: bold;",
            "3": "color: #5d478b; font-style: italic;",
            "MULTI": "color: #5d478b; font-style: italic;"
        },
        "ESCAPE_CHAR": [
            "background-color: #3cb371; font-weight: bold;"
        ],
        "BRACKETS": [
            "color: green;"
        ],
        "STRINGS": [
            "color: #3cb371;"
        ],
        "NUMBERS": [
            "color: red;"
        ],
        "METHODS": {
            "1": "color: #060;"
        },
        "REGEXPS": [],
        "SYMBOLS": [
            "color: #339933; font-weight: bold;"
        ],
        "SCRIPT": []
    },
    "URLS": {
        "1": "",
        "2": "http:\/\/haskell.org\/ghc\/docs\/latest\/html\/libraries\/base\/{FNAME}.html",
        "3": "http:\/\/haskell.org\/ghc\/docs\/latest\/html\/libraries\/base\/Prelude.html#v:{FNAME}",
        "4": "http:\/\/haskell.org\/ghc\/docs\/latest\/html\/libraries\/base\/Prelude.html#t:{FNAME}",
        "5": "http:\/\/haskell.org\/ghc\/docs\/latest\/html\/libraries\/base\/Prelude.html#t:{FNAME}"
    },
    "OOLANG": false,
    "OBJECT_SPLITTERS": [],
    "REGEXPS": [],
    "STRICT_MODE_APPLIES": 0,
    "SCRIPT_DELIMITERS": [],
    "HIGHLIGHT_STRICT_BLOCK": []
}