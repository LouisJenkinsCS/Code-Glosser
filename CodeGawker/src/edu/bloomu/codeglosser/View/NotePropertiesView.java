/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.bloomu.codeglosser.View;

import com.google.common.eventbus.EventBus;
import com.google.common.eventbus.Subscribe;
import edu.bloomu.codeglosser.Controller.NoteView;
import edu.bloomu.codeglosser.Model.Note;
import edu.bloomu.codeglosser.Utils.MarkupColorChangeEvent;
import java.util.concurrent.TimeUnit;

/**
 *
 * @author Louis
 */
public class NotePropertiesView extends javax.swing.JPanel implements NoteView {
    
    private Note note;
    private EventBus bus;
    
    /**
     * Creates new form NoteDescriptorPane
     */
    public NotePropertiesView() {
        initComponents();
        
        propertyTextExample1.setLabelText("Text Size");
        propertyTextExample1.observe()
                .throttleLast(1, TimeUnit.SECONDS)
                .map((str) -> "Text Size Change: " + str)
                .subscribe(System.out::println);
        
        propertyTextExample2.setLabelText("Text Font");
        propertyTextExample2.observe()
                .throttleLast(1, TimeUnit.SECONDS)
                .map((str) -> "Text Font Change: " + str)
                .subscribe(System.out::println);
        
        propertyMessage.setMessage("");
        propertyMessage.observe()
                .throttleLast(1, TimeUnit.SECONDS)
                .doOnNext((str) -> System.out.println("Note Message Change: " + str))
                .subscribe((str) -> {
                    // Note can be null when a change occurs (normally at initialization)
                    if (note != null) {
                        note.setMsg(str);
                    }
                });
        
        propertyHighlightColor.setPropertyName("Highlight Color");
        propertyHighlightColor.observe()
                .doOnNext((c) -> System.out.println("Highlight Color Change: " + c.toString()))
                .subscribe((c) -> bus.post(MarkupColorChangeEvent.of(note.getRange(), c)));
        clear();
    }
    
    public void setEventBus(EventBus bus) {
        this.bus = bus;
    }
    
    @Subscribe
    public void handleNoteChange(Note note) {
        display(note);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        noteName = new javax.swing.JLabel();
        propertyArea = new javax.swing.JPanel();
        propertyMessage = new edu.bloomu.codeglosser.View.PropertyTextArea();
        propertyTextExample1 = new edu.bloomu.codeglosser.View.PropertyPanel();
        propertyTextExample2 = new edu.bloomu.codeglosser.View.PropertyPanel();
        propertyHighlightColor = new edu.bloomu.codeglosser.View.PropertyColor();

        noteName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        noteName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(noteName, org.openide.util.NbBundle.getMessage(NotePropertiesView.class, "NotePropertiesView.noteName.text")); // NOI18N
        noteName.setToolTipText(org.openide.util.NbBundle.getMessage(NotePropertiesView.class, "NotePropertiesView.noteName.toolTipText")); // NOI18N

        javax.swing.GroupLayout propertyAreaLayout = new javax.swing.GroupLayout(propertyArea);
        propertyArea.setLayout(propertyAreaLayout);
        propertyAreaLayout.setHorizontalGroup(
            propertyAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propertyAreaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(propertyAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(propertyMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(propertyAreaLayout.createSequentialGroup()
                        .addGroup(propertyAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(propertyTextExample1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(propertyTextExample2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(propertyHighlightColor, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        propertyAreaLayout.setVerticalGroup(
            propertyAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propertyAreaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(propertyMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(propertyTextExample1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(propertyTextExample2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(propertyHighlightColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(124, Short.MAX_VALUE))
        );

        jLayeredPane1.setLayer(noteName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(propertyArea, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(noteName, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
            .addComponent(propertyArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addComponent(noteName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(propertyArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLayeredPane1))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLabel noteName;
    private javax.swing.JPanel propertyArea;
    private edu.bloomu.codeglosser.View.PropertyColor propertyHighlightColor;
    private edu.bloomu.codeglosser.View.PropertyTextArea propertyMessage;
    private edu.bloomu.codeglosser.View.PropertyPanel propertyTextExample1;
    private edu.bloomu.codeglosser.View.PropertyPanel propertyTextExample2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void display(Note note) {
        this.note = note;
        this.propertyArea.setVisible(true);
        this.noteName.setText(note.getId());
        this.propertyMessage.setMessage(note.getMsg());
        this.propertyHighlightColor.setColor(note.getHighlightColor());
        
    }

    @Override
    public void clear() {
        this.note = null;
        this.noteName.setText("None Selected");
        this.propertyArea.setVisible(false);
    }
}
